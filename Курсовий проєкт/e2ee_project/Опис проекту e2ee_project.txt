Опис проекту: Застосунок із наскрізним шифруванням
________________________________________
1. Мета проекту
Проект створений для забезпечення конфіденційного, цілісного та автентичного обміну даними між клієнтами у мережі. Основна мета — гарантувати безпеку комунікації навіть у присутності потенційно ворожих учасників або компрометованих каналів зв’язку.
Застосунок використовує наскрізне шифрування (E2EE), що забезпечує:
•	захист від перехоплення (конфіденційність;
•	виявлення модифікації даних (цілісність);
•	перевірку автентичності учасників (аутентифікація).
________________________________________
2. Основні складові
1.	Серверна частина:
-	Забезпечує з’єднання клієнтів у мережі.
-	Не має доступу до зашифрованих даних, працюючи лише як ретранслятор.
2.	Клієнтська частина:
-	Підключення до сервера через захищений канал.
-	Генерація ключів шифрування та використання для безпечного обміну даними.
-	Логування для відстеження процесів (за бажанням).
3.	Механізм динамічної зміни ключів:
-	Реалізовано через алгоритм ChaCha20, що дозволяє змінювати ключі під час сесії без втрати безпеки.
________________________________________
3. Використані протоколи
1.	SSL/TLS:
-	Захищене з'єднання між клієнтом і сервером.
-	Використовується для первинної автентифікації та встановлення зв’язку.
2.	ChaCha20-Poly1305:
-	ChaCha20 для симетричного шифрування даних.
-	Poly1305 для перевірки цілісності та автентичності повідомлень.
3.	PKI (Інфраструктура відкритих ключів):
-	Сертифікати X.509 для автентифікації серверів і клієнтів.
-	Центр сертифікації (CA) для генерації ключів.
________________________________________
4. Безпека
4.1. Шифрування
•	Використовується ChaCha20, який забезпечує швидке та безпечне симетричне шифрування даних. Ключі шифрування генеруються динамічно з використанням механізму Double Ratchet, що дозволяє:
-	Постійно змінювати ключі шифрування навіть у процесі тривалої сесії.
-	Захищати від витоку ключів за рахунок перехресного шифрування.
4.2. Механізм Double Ratchet
Double Ratchet — криптографічний алгоритм, який забезпечує:
1.	Прямий секрет (Forward Secrecy):
-	Навіть якщо поточний ключ компрометовано, минулі повідомлення залишаються захищеними, оскільки попередні ключі не зберігаються.
2.	Перехресний секрет (Post-Compromise Security):
-	Якщо ключ було зламано, всі наступні повідомлення стають безпечними завдяки генерації нових ключів на основі обміну повідомленнями.
3.	Динамічна зміна ключів:
-	При кожному отриманні або відправленні повідомлення використовується новий ключ шифрування, що генерується за допомогою алгоритму Ratchet.
4.3. Взаємодія Double Ratchet із ChaCha20
•	Double Ratchet генерує ключі, які передаються в алгоритм ChaCha20 для шифрування.
•	Алгоритм Poly1305 перевіряє автентичність повідомлення, використовуючи тег автентифікації, згенерований для кожного блоку даних.
4.4. Цілісність
•	Забезпечується за допомогою Poly1305:
-	Гарантія відсутності колізій.
-	Перевірка, що дані не були змінені під час передачі.
4.5. Автентифікація
•	Сертифікати X.509 підтверджують автентичність клієнтів і серверів.
•	Захист від атак MITM завдяки перевірці сертифікатів.
4.6. Захист від атак
•	Захист від повторного використання ключів через механізм одноразових ключів.
•	Додатковий захист від атак другого роду завдяки властивостям Poly1305.
•	Використання SSL/TLS для шифрування "на рівні транспортного шару".
________________________________________
5. Логування
•	Логування на сервері та клієнті включає:
-	Інформацію про підключення.
-	Технічні помилки.
-	Дані для відлагодження (без збереження конфіденційних даних).
________________________________________
6. Архітектура проекту
1.	Клієнт → Сервер:
-	Клієнт підключається до сервера через SSL/TLS.
-	Сервер перевіряє сертифікат клієнта.
-	Після успішного з'єднання клієнти обмінюються зашифрованими повідомленнями.
2.	Динамічне шифрування:
-	У межах кожної сесії використовується новий ключ для ChaCha20, що унеможливлює компрометацію даних у разі витоку ключа.
3.	Файлова структура проекту:
e2ee_project/
├── server.py
├── client.py
├── utils/                   # Різні утиліти
│   ├── __init__.py
│   └──  utils.py             
├── ratchet/
│   ├── __init__.py
│   ├── double_ratchet.py          # алгоритм Double Ratchet
│   └── key_management.py     # Генерація та зберігання ключів
├── requirements.txt                  # Список залежностей
├── Опис проекту.txt                
├── Інструкція з роботи застосунком  e2ee_project.txt  
├── README.md                
└── certs/
     ├── ca/
     │   ├── ca.crt    # Сертифікати і ключі Сертифікаційного Центру 
     │   └── ca.key
     ├── server/              # Сертифікати і ключі сервера
     │   ├── server.crt
     │   ├── server.key
     │   ├── server.csr
     │   └── ca.srl
     └──  client_certs/
          ├── Bob/             # Сертифікати і ключі Клієнта 1
          │   ├── Bob.key       
          │   └── Bob.crt
          ├── Mishel/          # Сертифікати і ключі Клієнта 2
          │   ├── Mishel.key    
          │   └── Mishel.crt
          ├── Eve/             # Сертифікати і ключі Клієнта 3
          │   ├── Eve.key      
          │   └── Eve.crt
          ├── Alice/           # Сертифікати і ключі Клієнта 4
          │   ├── Alice.key     
          │   └── Alice.crt
          └──     .....            # Інші ключі та сертифікати, якщо потрібно
________________________________________
7. Застосовані криптографічні алгоритми
1.	Double Ratchet:
-	Центральний механізм для безпечного обміну ключами.
-	Забезпечує динамічну зміну ключів під час кожної сесії.
-	Захищає від атак на протокол, зокрема MITM та перехоплення повідомлень.
2.	ChaCha20-Poly1305:
-	Шифрування та забезпечення цілісності повідомлень.
3.	Poly1305 захищає від атак на цілісність.
4.	SSL/TLS:
-	Захищає транспортний рівень і забезпечує початковий обмін ключами.
5.	PKI (RSA/EC):
-	Використовується для початкової автентифікації та створення основи для генерації сесійних ключів.
________________________________________
8. Використання
•	Для серверного розгортання:
-	Сертифікати сервера та клієнтів зберігаються у визначених папках.
-	Сервер очікує підключення клієнтів через порт 12345.
•	Для клієнта:
-	Користувач запускає програму з параметром ім’я клієнта (відповідає його сертифікатам).
________________________________________
9. Можливі потенційні розширення
•	Додавання механізмів захисту від DOS-атак.
•	Реалізація додаткових алгоритмів шифрування для альтернативного вибору користувачем.
