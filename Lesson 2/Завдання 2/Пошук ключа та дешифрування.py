import random
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad


class MT19937Reverse:
    """Reverses the Mersenne Twister based on 624 observed outputs."""

    def unshiftRight(self, x, shift):
        res = x
        for i in range(32):
            res = x ^ (res >> shift)
        return res

    def unshiftLeft(self, x, shift, mask):
        res = x
        for i in range(32):
            res = x ^ ((res << shift) & mask)
        return res

    def untemper(self, v):
        """Reverses the tempering which is applied to outputs of MT19937"""
        v = self.unshiftRight(v, 18)
        v = self.unshiftLeft(v, 15, 0xEFC60000)
        v = self.unshiftLeft(v, 7, 0x9D2C5680)
        v = self.unshiftRight(v, 11)
        return v

    def reverse(self, outputs, forward=True):
        """Reverses the Mersenne Twister based on 624 observed values."""
        result_state = None
        assert len(outputs) >= 624  # need at least 624 values

        ivals = []
        for i in range(624):
            ivals.append(self.untemper(outputs[i]))

        if len(outputs) >= 625:
            # We have additional outputs and can correctly recover the internal index
            challenge = outputs[624]
            for i in range(1, 626):
                state = (3, tuple(ivals + [i]), None)
                r = random.Random()
                r.setstate(state)

                if challenge == r.getrandbits(32):
                    result_state = state
                    break
        else:
            # Assume they were the first observed 624 outputs after a twist
            result_state = (3, tuple(ivals + [624]), None)

        rand = random.Random()
        rand.setstate(result_state)

        if forward:
            for i in range(624, len(outputs)):
                assert rand.getrandbits(32) == outputs[i]

        return rand


def decrypt_aes_ecb(encrypted_data, key):
    """Розшифровує дані за допомогою AES-128 у режимі ECB."""
    key_bytes = key.to_bytes(16, "little")  # Перетворення ключа на 16-байтовий формат
    cipher = AES.new(key_bytes, AES.MODE_ECB)
    decrypted_data = cipher.decrypt(encrypted_data)
    return decrypted_data


def find_key_and_decrypt(generator, encrypted_data):
    """Знаходить ключ та розшифровує дані, перевіряючи заголовок BMP."""
    for _ in range(200):  # Перебір наступних 6400 бітів (200 чисел)
        key_candidate = generator.getrandbits(128)
        try:
            decrypted_data = decrypt_aes_ecb(encrypted_data, key_candidate)
            # Перевірка заголовка BMP (0x424D)
            if decrypted_data[0:2] == b'BM':
                return key_candidate, decrypted_data
        except Exception:
            continue  # Ігноруємо помилки під час розшифрування
    return None, None


def main():
    # Перехоплені значення для відновлення початкового стану
    intercepted_values = [3678486458, 1174718143, 1006286772, 231924303, 1284706793, 3559036727, 3252546885, 1846908803,
                          266030513, 2970495392, 2243846171, 2536712158, 2788825486, 472195173, 1401942964, 726180342,
                          3473963455, 689827036, 2001855274, 3019148208, 80597727, 961541771, 2763847787, 4005210405,
                          1989404997, 3089147289, 2155216917, 88692692, 281993599, 561528996, 990397762, 2226531651,
                          3588040374, 90743230, 1027002728, 4192129044, 1445893539, 1445977292, 3198667153, 3541588048,
                          400121177, 3454923359, 2754901598, 3575239485, 2253783393, 2667178088, 2043161563, 3095317291,
                          3302224418, 1494816596, 3220883859, 590247427, 4273834765, 925418556, 2658580290, 1725670064,
                          3913674973, 3505696639, 2821785018, 3391676829, 819853437, 3400175936, 3366011801, 2052975936,
                          271111037, 745790860, 417441593, 3592842175, 1298149910, 4166690569, 335931570, 3542063894,
                          4067041849, 74489023, 2459222620, 2906828736, 2749900675, 3475324412, 2717601381, 3381720161,
                          610200780, 1042664976, 3527534803, 3375375565, 201530022, 3402668166, 1763688480, 3298985369,
                          856496047, 1506882812, 751492204, 2248435446, 1872121926, 3811834379, 3734755664, 1210076323,
                          1987824154, 1239702316, 2726184979, 3989305988, 2728733179, 1817182459, 3705195093, 157688826,
                          3210607753, 3041873369, 1274716099, 1657773687, 3220711795, 2610985886, 1909856223,
                          3957128690, 1782878656, 1085418994, 1421426644, 1666129978, 3763017764, 2093328299,
                          3575659936, 2269034082, 2995971603, 3975229888, 113870712, 838917372, 3865959175, 2007687217,
                          1291351958, 458092629, 2639043276, 142708707, 3552035115, 2277061946, 2871092149, 2909676984,
                          4218157005, 4179601750, 1779069743, 2959101483, 2138302042, 1503877818, 4055629083,
                          1552108616, 1086414627, 3067651163, 643274994, 3398121153, 3765163858, 1134744130, 3254830568,
                          3204108572, 1587121695, 2338950894, 1514011848, 2725227484, 3018284159, 1493357892,
                          1906119867, 94421730, 1371812429, 1457693564, 3797580082, 2568763041, 1623600397, 141426949,
                          2764501424, 925339947, 2830212689, 3087666844, 3292181686, 1428761304, 848451762, 4288955582,
                          4184364020, 2040011601, 3517764636, 1867645335, 1430214054, 3947883008, 2768766540, 768742214,
                          3497695314, 2764187885, 662829884, 1300487988, 3201761593, 3103607126, 699100303, 1820463194,
                          1469169341, 1649529161, 99373032, 361486435, 2895840800, 1415869285, 724645088, 3015786336,
                          1136781873, 602431835, 2725483207, 3788420755, 549258363, 2750443685, 3462757790, 1127656966,
                          908783782, 2139436392, 2060314008, 1735928538, 280335188, 2945424333, 3583242031, 1207500690,
                          426560523, 267038288, 1333158214, 2868277618, 255160164, 4227324396, 1036974423, 1021328674,
                          1483800905, 3721722511, 2846542236, 1113115425, 3940991890, 3362144788, 1236194046, 995018432,
                          3640658517, 652315958, 2964782747, 3512814536, 159492638, 3705954104, 546593082, 2157459579,
                          3100915629, 1636574512, 547334875, 2206219358, 557272391, 557240977, 2501515362, 1587779724,
                          1567359918, 3041037272, 1480412411, 1988194788, 2979035321, 383835280, 2935044884, 3508527923,
                          2084066081, 3875819157, 1516892017, 3911855156, 3303592040, 3212089664, 567535951, 872304503,
                          3414173057, 275931604, 2409289098, 3445630952, 2630845671, 3001224042, 2966577994, 3644727299,
                          4114437468, 600803535, 2255041492, 4265516471, 975301491, 3345111810, 748122193, 1134534159,
                          2830009000, 1686561293, 2234182666, 692448388, 3000750481, 1787746132, 2057707285, 1446215040,
                          306986358, 2550136976, 3204144962, 2612635934, 3424931735, 2274526098, 2748775340, 1532968530,
                          389615339, 48437223, 1554774427, 1449086428, 420897959, 2906469586, 2146631228, 1013883129,
                          285444857, 2044797731, 531051671, 298713502, 1673767837, 759420525, 941050697, 546722038,
                          1138705316, 828095345, 2236636479, 4219846104, 1959884659, 154598770, 421047515, 2904011159,
                          2350644330, 1862181230, 4273287380, 1885914229, 2345512012, 2615426671, 3010902757,
                          2084901222, 3349320359, 3063191009, 407887453, 2762069867, 241812123, 3304281351, 1959544937,
                          3182211092, 705206357, 1893441397, 379329423, 3769790868, 2114800738, 4167860294, 1395278085,
                          2050965484, 3237482585, 1135334582, 3333884454, 818184150, 3091090748, 3232341516, 1847068006,
                          2473879425, 2042968272, 2714240288, 2549137875, 2138045092, 2285870398, 604797024, 2296448077,
                          3157171763, 2206648084, 101192412, 356527262, 1230435589, 91559823, 1494097115, 1735286362,
                          19656357, 774003044, 3787780736, 2105562131, 3821423192, 1816863116, 777468214, 468662814,
                          2090868896, 1338257089, 1687706610, 2304445872, 165157658, 895711068, 1653568093, 3803309943,
                          3324230534, 4111046380, 2391032141, 240605176, 2331005582, 3220922234, 1861304119, 2487542209,
                          1814980761, 954509759, 119113116, 3065759930, 3124845922, 2639227587, 3599235591, 3648847811,
                          366748235, 2499065264, 1460704378, 3515073933, 62704942, 371587426, 3615406314, 240761449,
                          2293890158, 824106879, 1308580752, 2203795878, 2130609281, 396074949, 3769026346, 1610230750,
                          280249185, 1363236730, 4283555936, 3605340345, 471169712, 3695349224, 3946085829, 11598506,
                          647778789, 802114630, 2038523770, 3176813054, 2371893590, 3608988511, 2282960641, 3267849171,
                          3313635751, 2375548509, 273320213, 1339075221, 4261680131, 2467321687, 914806644, 3125327292,
                          3190883500, 1406103723, 3276514147, 168630296, 4199125971, 2538837503, 3401165803, 3982579161,
                          869506063, 3714002799, 1768572182, 1370030095, 2921271287, 3350293635, 3202655719, 3928461251,
                          4067118273, 2053957350, 452642300, 2805659183, 196574356, 196097894, 4158023506, 112689706,
                          3618892309, 363546914, 4066851608, 2333365660, 3570447402, 405989839, 2954053119, 458415065,
                          2931371295, 3874108733, 1208094750, 3050503433, 3561955260, 3018969654, 2571130508, 438067288,
                          1712636431, 2589065321, 3674702095, 1946912069, 3184393615, 3078712835, 2459846675,
                          1590959020, 2400722074, 4144305990, 481505538, 2573016209, 3229560039, 1604407277, 2655286844,
                          1277668706, 2197882520, 409201945, 134604304, 289319069, 2563036987, 488242476, 2482512730,
                          271891113, 2670471247, 4148324657, 3045139126, 1438810661, 1056968331, 3518028869, 3030141510,
                          756205380, 2303163374, 3604443122, 2184974018, 4235709605, 4110147642, 1044032859, 709522410,
                          867749092, 3671268153, 1947585495, 1234893645, 959033851, 3011264069, 2136956288, 4087804288,
                          1714246690, 2674633945, 2657433978, 2227972688, 3931020413, 2162486049, 1533377043, 914750172,
                          1299937137, 2709267735, 1668508214, 1309781729, 2283854173, 2202144176, 3476161877,
                          3647213371, 3466021973, 701571057, 637543869, 3371207964, 1195686381, 2255194040, 2464394686,
                          3304953628, 3939372227, 1057519078, 483140006, 1251253961, 2719570892, 188521162, 2808153987,
                          1261451463, 2513918298, 2924236089, 1800058032, 304931227, 139347978, 2886981745, 2110721154,
                          1603369220, 3167902653, 1428505430, 3130245221, 3169611541, 25044121, 210213615, 1296411684,
                          1902452014, 3680525312, 3743504735, 97857142, 4035241855, 4094351347, 2730177929, 2895108302,
                          3685795622, 73154830, 3118667274, 1136243662, 78182021, 3134385641, 660488639, 967876107,
                          2713466597, 3773113902, 3635802698, 2697479400, 2565644549, 1278887693, 2958933311,
                          3730272892, 1057084414, 3514102578, 4238891467, 2879486646, 2529307166, 1810275323,
                          3482827904, 59854761, 2568272383, 2371576036, 3105953415, 1033623757, 680909174, 46278330,
                          2524528152, 2402315959, 345467435, 3563092558, 3982499312, 966899890, 80112464, 161587668,
                          2181373370, 4293908751, 4266351663, 1550622398, 2581069242, 646999880, 1435196133, 63008035,
                          1126063231, 2255455802]  # Вставте всі 625 значень

    # Відновлення генератора з використанням класу MT19937Reverse
    mt_reverse = MT19937Reverse()
    generator = mt_reverse.reverse(intercepted_values)

    # Завантаження зашифрованого BMP файлу
    with open("data.bmp.enc", "rb") as f:
        encrypted_data = f.read()

    # Пошук ключа та розшифрування
    key, decrypted_data = find_key_and_decrypt(generator, encrypted_data)
    if decrypted_data is not None:
        with open("decrypted_image.bmp", "wb") as f:
            f.write(decrypted_data)
        print(f"Ключ знайдено: {hex(key)}")
    else:
        print("Ключ не знайдено")


if __name__ == "__main__":
    main()
